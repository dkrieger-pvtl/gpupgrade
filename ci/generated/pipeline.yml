## Code generated by ci/generate.go - DO NOT EDIT
---
# Copyright (c) 2017-2020 VMware, Inc. or its affiliates
# SPDX-License-Identifier: Apache-2.0

resource_types:
- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: 0.11.14

resources:
- name: gpupgrade_src
  type: git
  source:
    uri: ((gpupgrade-git-remote))
    branch: ((gpupgrade-git-branch))
    fetch_tags: true

#- name: gpdb_rpm_installer_centos7
#  type: gcs
#  source:
#    #    bucket: ((gcs-bucket))
#    bucket: pivotal-gpdb-concourse-resources-intermediates-prod
#    json_key: ((concourse-gcs-resources-service-account-key))
#    #    regexp: server/published/master/greenplum-db-(.*)-rhel7-x86_64((rc-build-type-gcs)).rpm
#    versioned_file: 7_to_7_upgrade_ICW/greenplum-db-7.0.0-rhel7-x86_64.debug.rpm

- name: rpm_gpdb7_centos7
  type: gcs
  source:
    bucket: pivotal-gpdb-concourse-resources-intermediates-prod
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: 7_to_7_upgrade_ICW/greenplum-db-(7.*)-rhel7-x86_64.debug.rpm

#
#
#- name: rpm_gpdb7_centos7
#  type: gcs
#  source:
#    bucket: ((gcs-bucket))
#    json_key: ((concourse-gcs-resources-service-account-key))
#    regexp: server/published/gpdb7/greenplum-db-(7.*)-rhel7-x86_64.debug.rpm
#
#


- name: rpm_oss
  type: gcs
  source:
    bucket: ((cm-intermediates-bucket))
    json_key: ((cm-gcs-service-account-key))
    versioned_file: oss/gpupgrade-intermediate.el7.x86_64.rpm

- name: rpm_enterprise
  type: gcs
  source:
    bucket: ((cm-intermediates-bucket))
    json_key: ((cm-gcs-service-account-key))
    versioned_file: enterprise/gpupgrade-intermediate.el7.x86_64.rpm

- name: bats
  type: git
  source:
    uri: https://github.com/bats-core/bats-core
    branch: master
    tag_filter: v1.*

- name: slack-alert
  type: slack-notification
  source:
    url: ((cm_webhook_url))

- name: ccp_src
  type: git
  source:
    branch: ((ccp-git-branch))
    private_key: ((ccp-git-key))
    uri: ((ccp-git-remote))

- name: terraform
  type: terraform
  source:
    env:
      AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
      AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
      GOOGLE_CREDENTIALS: ((google-service-account-key))
    vars:
      project_id: ((google-project-id))
    storage:
      access_key_id: ((tf-machine-access-key-id))
      secret_access_key: ((tf-machine-secret-access-key))
      region_name: ((aws-region))
      # This is not parameterized, on purpose. All tfstates will go to this spot,
      # and different teams will place there clusters' tfstate files under different paths
      bucket: gpdb5-pipeline-dynamic-terraform
      bucket_path: clusters-google/

- name: dump_gpdb7_icw_planner_centos7
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: gpdb_master/icw_planner_centos7_dump/dump.sql.xz

anchors:
  - &ccp_default_params
    action: create
    delete_on_failure: true
    generate_random_name: true
    terraform_source: ccp_src/google/

  - &ccp_gen_cluster_default_params
    AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
    AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
    AWS_DEFAULT_REGION: ((aws-region))
    BUCKET_PATH: clusters-google/
    BUCKET_NAME: ((tf-bucket-name))
    CLOUD_PROVIDER: google

  - &ccp_destroy
    put: terraform
    params:
      action: destroy
      env_name_file: terraform/name
      terraform_source: ccp_src/google/
      vars:
        aws_instance-node-instance_type: t2.micro #t2.micro is ignored in destroy, but aws_instance-node-instance_type is required.
        aws_ebs_volume_type: standard
    get_params:
      action: destroy

  - &set_failed
    do:
      - task: on_failure_set_failed
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: pivotaldata/ccp
              tag: "7"
          inputs:
            - name: ccp_src
            - name: terraform
          run:
            path: 'ccp_src/google/ccp_failed_test.sh'
          params:
            GOOGLE_CREDENTIALS: ((google-service-account-key))
            GOOGLE_PROJECT_ID: ((google-project-id))
            GOOGLE_ZONE: ((google-zone))
            GOOGLE_SERVICE_ACCOUNT: ((google-service-account))
            AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
            AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
            AWS_DEFAULT_REGION: ((tf-machine-region))
            BUCKET_PATH: clusters-google/
            BUCKET_NAME: ((tf-bucket-name))

  - &slack_alert
    do:
      - put: slack-alert
        params:
          text: |
            Hey team, <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|gpupgrade/$BUILD_JOB_NAME> failed.

groups:
  - name: all
    jobs:
      - build
      - noinstall-tests
      - 7-to-7-centos-7
  - name: upgrade
    jobs:
      - build
      - 7-to-7-centos-7
  - name: functional
    jobs:
      - build

jobs:
- name: build
  plan:
  - get: gpupgrade_src
    trigger: true
  - task: build
    file: gpupgrade_src/ci/tasks/build.yml
  - in_parallel:
    - put: rpm_oss
      params:
        file: built_oss/gpupgrade-*.rpm
    - put: rpm_enterprise
      params:
        file: built_enterprise/gpupgrade-*.rpm
  on_failure:
    <<: *slack_alert

- name: noinstall-tests
  plan:
  - in_parallel:
    - get: gpupgrade_src
      trigger: true
    - get: bats
  - task: noinstall-tests
    file: gpupgrade_src/ci/tasks/noinstall-tests.yml
  on_failure:
    <<: *slack_alert


- name: 7-to-7-centos-7
  serial_groups: [7-to-7]
  # Specifying serial groups so that only one platform runs at a time. For
  # example, 5-to-6-centos7 will only run after 5-to-6-centos6 completes. This
  # will prevent concourse from becoming overloaded.
  plan:
    - in_parallel:
        - get: rpm_enterprise
          trigger: true
          passed: [ build ]
        - get: gpupgrade_src
        - get: rpm_gpdb_source
          resource: rpm_gpdb7_centos7
          trigger: true
        - get: ccp_src
        # FIXME: this is not guaranteed to be the same dump generated by the
        # above binary...
        - get: sqldump
          resource: dump_gpdb7_icw_planner_centos7
    - put: terraform
      params:
        <<: *ccp_default_params
        vars:
          standby_master: true
          instance_type: n1-standard-2
          number_of_nodes: 4
          PLATFORM: centos7
          # Decrease the reap time from the default of 8 hours now that there are
          # both centos6 and centos7 jobs in order to not overload concourse.
          ccp_reap_minutes: 180
    - task: gen_source_cluster
      file: ccp_src/ci/tasks/gen_cluster.yml
      params:
        <<: *ccp_gen_cluster_default_params
        PLATFORM: centos7
        GPDB_RPM: true
      input_mapping:
        gpdb_rpm: rpm_gpdb_source
    - task: gpinitsystem_source_cluster
      file: ccp_src/ci/tasks/gpinitsystem.yml
    - task: prepare_source_and_target_installations
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: alpine
            tag: latest
        inputs:
          - name: gpupgrade_src
          - name: cluster_env_files
        run:
          path: gpupgrade_src/ci/scripts/prepare-source-and-target-installations.sh
          args:
            - greenplum-db-7
            - greenplum-db-7
    - task: load_dump
      file: gpupgrade_src/ci/tasks/load-dump.yml
    - task: upgrade_cluster
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: pivotaldata/gpdb6-centos7-test-golang
            tag: "latest"
        inputs:
        - name: terraform
        - name: ccp_src
        - name: cluster_env_files
        - name: gpupgrade_src
        - name: rpm_enterprise
        run:
          path: gpupgrade_src/ci/scripts/upgrade-cluster.bash
      params:
    - task: validate_mirrors_and_standby
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: pivotaldata/gpdb6-centos7-test-golang
            tag: "latest"
        inputs:
          - name: gpupgrade_src
          - name: cluster_env_files
        run:
          path: gpupgrade_src/ci/scripts/validate-mirrors-and-standby.bash
  ensure:
    <<: *set_failed
  on_success:
    <<: *ccp_destroy
  on_failure:
    <<: *slack_alert
