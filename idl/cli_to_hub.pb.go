// Copyright (c) 2017-2020 VMware, Inc. or its affiliates
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: cli_to_hub.proto

package idl

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Step int32

const (
	Step_UNKNOWN_STEP Step = 0 // http://androiddevblog.com/protocol-buffers-pitfall-adding-enum-values/
	Step_INITIALIZE   Step = 1
	Step_EXECUTE      Step = 2
	Step_FINALIZE     Step = 3
	Step_REVERT       Step = 4
)

// Enum value maps for Step.
var (
	Step_name = map[int32]string{
		0: "UNKNOWN_STEP",
		1: "INITIALIZE",
		2: "EXECUTE",
		3: "FINALIZE",
		4: "REVERT",
	}
	Step_value = map[string]int32{
		"UNKNOWN_STEP": 0,
		"INITIALIZE":   1,
		"EXECUTE":      2,
		"FINALIZE":     3,
		"REVERT":       4,
	}
)

func (x Step) Enum() *Step {
	p := new(Step)
	*p = x
	return p
}

func (x Step) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Step) Descriptor() protoreflect.EnumDescriptor {
	return file_cli_to_hub_proto_enumTypes[0].Descriptor()
}

func (Step) Type() protoreflect.EnumType {
	return &file_cli_to_hub_proto_enumTypes[0]
}

func (x Step) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Step.Descriptor instead.
func (Step) EnumDescriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{0}
}

type Substep int32

const (
	Substep_UNKNOWN_SUBSTEP                          Substep = 0 // http://androiddevblog.com/protocol-buffers-pitfall-adding-enum-values/
	Substep_CREATING_DIRECTORIES                     Substep = 1
	Substep_SAVING_SOURCE_CLUSTER_CONFIG             Substep = 2
	Substep_START_HUB                                Substep = 3
	Substep_START_AGENTS                             Substep = 4
	Substep_CHECK_DISK_SPACE                         Substep = 5
	Substep_CREATE_TARGET_CONFIG                     Substep = 6
	Substep_INIT_TARGET_CLUSTER                      Substep = 7
	Substep_SHUTDOWN_TARGET_CLUSTER                  Substep = 8
	Substep_BACKUP_TARGET_MASTER                     Substep = 9
	Substep_CHECK_UPGRADE                            Substep = 10
	Substep_SHUTDOWN_SOURCE_CLUSTER                  Substep = 11
	Substep_UPGRADE_MASTER                           Substep = 12
	Substep_COPY_MASTER                              Substep = 13
	Substep_UPGRADE_PRIMARIES                        Substep = 14
	Substep_START_TARGET_CLUSTER                     Substep = 15
	Substep_UPDATE_TARGET_CATALOG_AND_CLUSTER_CONFIG Substep = 16
	Substep_UPDATE_DATA_DIRECTORIES                  Substep = 17
	Substep_UPDATE_TARGET_CONF_FILES                 Substep = 18
	Substep_UPGRADE_STANDBY                          Substep = 19
	Substep_UPGRADE_MIRRORS                          Substep = 20
	Substep_DELETE_TABLESPACES                       Substep = 21
	Substep_DELETE_PRIMARY_DATADIRS                  Substep = 22
	Substep_DELETE_MASTER_DATADIR                    Substep = 23
	Substep_DELETE_SEGMENT_STATEDIRS                 Substep = 24
	Substep_STOP_HUB_AND_AGENTS                      Substep = 25
	Substep_DELETE_MASTER_STATEDIR                   Substep = 26
	Substep_ARCHIVE_LOG_DIRECTORIES                  Substep = 27
	Substep_RESTORE_SOURCE_CLUSTER                   Substep = 28
	Substep_START_SOURCE_CLUSTER                     Substep = 29
)

// Enum value maps for Substep.
var (
	Substep_name = map[int32]string{
		0:  "UNKNOWN_SUBSTEP",
		1:  "CREATING_DIRECTORIES",
		2:  "SAVING_SOURCE_CLUSTER_CONFIG",
		3:  "START_HUB",
		4:  "START_AGENTS",
		5:  "CHECK_DISK_SPACE",
		6:  "CREATE_TARGET_CONFIG",
		7:  "INIT_TARGET_CLUSTER",
		8:  "SHUTDOWN_TARGET_CLUSTER",
		9:  "BACKUP_TARGET_MASTER",
		10: "CHECK_UPGRADE",
		11: "SHUTDOWN_SOURCE_CLUSTER",
		12: "UPGRADE_MASTER",
		13: "COPY_MASTER",
		14: "UPGRADE_PRIMARIES",
		15: "START_TARGET_CLUSTER",
		16: "UPDATE_TARGET_CATALOG_AND_CLUSTER_CONFIG",
		17: "UPDATE_DATA_DIRECTORIES",
		18: "UPDATE_TARGET_CONF_FILES",
		19: "UPGRADE_STANDBY",
		20: "UPGRADE_MIRRORS",
		21: "DELETE_TABLESPACES",
		22: "DELETE_PRIMARY_DATADIRS",
		23: "DELETE_MASTER_DATADIR",
		24: "DELETE_SEGMENT_STATEDIRS",
		25: "STOP_HUB_AND_AGENTS",
		26: "DELETE_MASTER_STATEDIR",
		27: "ARCHIVE_LOG_DIRECTORIES",
		28: "RESTORE_SOURCE_CLUSTER",
		29: "START_SOURCE_CLUSTER",
	}
	Substep_value = map[string]int32{
		"UNKNOWN_SUBSTEP":                          0,
		"CREATING_DIRECTORIES":                     1,
		"SAVING_SOURCE_CLUSTER_CONFIG":             2,
		"START_HUB":                                3,
		"START_AGENTS":                             4,
		"CHECK_DISK_SPACE":                         5,
		"CREATE_TARGET_CONFIG":                     6,
		"INIT_TARGET_CLUSTER":                      7,
		"SHUTDOWN_TARGET_CLUSTER":                  8,
		"BACKUP_TARGET_MASTER":                     9,
		"CHECK_UPGRADE":                            10,
		"SHUTDOWN_SOURCE_CLUSTER":                  11,
		"UPGRADE_MASTER":                           12,
		"COPY_MASTER":                              13,
		"UPGRADE_PRIMARIES":                        14,
		"START_TARGET_CLUSTER":                     15,
		"UPDATE_TARGET_CATALOG_AND_CLUSTER_CONFIG": 16,
		"UPDATE_DATA_DIRECTORIES":                  17,
		"UPDATE_TARGET_CONF_FILES":                 18,
		"UPGRADE_STANDBY":                          19,
		"UPGRADE_MIRRORS":                          20,
		"DELETE_TABLESPACES":                       21,
		"DELETE_PRIMARY_DATADIRS":                  22,
		"DELETE_MASTER_DATADIR":                    23,
		"DELETE_SEGMENT_STATEDIRS":                 24,
		"STOP_HUB_AND_AGENTS":                      25,
		"DELETE_MASTER_STATEDIR":                   26,
		"ARCHIVE_LOG_DIRECTORIES":                  27,
		"RESTORE_SOURCE_CLUSTER":                   28,
		"START_SOURCE_CLUSTER":                     29,
	}
)

func (x Substep) Enum() *Substep {
	p := new(Substep)
	*p = x
	return p
}

func (x Substep) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Substep) Descriptor() protoreflect.EnumDescriptor {
	return file_cli_to_hub_proto_enumTypes[1].Descriptor()
}

func (Substep) Type() protoreflect.EnumType {
	return &file_cli_to_hub_proto_enumTypes[1]
}

func (x Substep) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Substep.Descriptor instead.
func (Substep) EnumDescriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{1}
}

type Status int32

const (
	Status_UNKNOWN_STATUS Status = 0 // http://androiddevblog.com/protocol-buffers-pitfall-adding-enum-values/
	Status_RUNNING        Status = 1
	Status_COMPLETE       Status = 2
	Status_FAILED         Status = 3
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "UNKNOWN_STATUS",
		1: "RUNNING",
		2: "COMPLETE",
		3: "FAILED",
	}
	Status_value = map[string]int32{
		"UNKNOWN_STATUS": 0,
		"RUNNING":        1,
		"COMPLETE":       2,
		"FAILED":         3,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_cli_to_hub_proto_enumTypes[2].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_cli_to_hub_proto_enumTypes[2]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{2}
}

type ResponseKey int32

const (
	ResponseKey_ResponseKey_UNSPECIFIED      ResponseKey = 0 // https://developers.google.com/protocol-buffers/docs/style#enums
	ResponseKey_source_port                  ResponseKey = 1
	ResponseKey_target_port                  ResponseKey = 2
	ResponseKey_source_master_data_directory ResponseKey = 3
	ResponseKey_target_master_data_directory ResponseKey = 4
	ResponseKey_revert_log_archive_directory ResponseKey = 5
	ResponseKey_source_version               ResponseKey = 6
)

// Enum value maps for ResponseKey.
var (
	ResponseKey_name = map[int32]string{
		0: "ResponseKey_UNSPECIFIED",
		1: "source_port",
		2: "target_port",
		3: "source_master_data_directory",
		4: "target_master_data_directory",
		5: "revert_log_archive_directory",
		6: "source_version",
	}
	ResponseKey_value = map[string]int32{
		"ResponseKey_UNSPECIFIED":      0,
		"source_port":                  1,
		"target_port":                  2,
		"source_master_data_directory": 3,
		"target_master_data_directory": 4,
		"revert_log_archive_directory": 5,
		"source_version":               6,
	}
)

func (x ResponseKey) Enum() *ResponseKey {
	p := new(ResponseKey)
	*p = x
	return p
}

func (x ResponseKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseKey) Descriptor() protoreflect.EnumDescriptor {
	return file_cli_to_hub_proto_enumTypes[3].Descriptor()
}

func (ResponseKey) Type() protoreflect.EnumType {
	return &file_cli_to_hub_proto_enumTypes[3]
}

func (x ResponseKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseKey.Descriptor instead.
func (ResponseKey) EnumDescriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{3}
}

type Chunk_Type int32

const (
	Chunk_UNKNOWN Chunk_Type = 0
	Chunk_STDOUT  Chunk_Type = 1
	Chunk_STDERR  Chunk_Type = 2
)

// Enum value maps for Chunk_Type.
var (
	Chunk_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "STDOUT",
		2: "STDERR",
	}
	Chunk_Type_value = map[string]int32{
		"UNKNOWN": 0,
		"STDOUT":  1,
		"STDERR":  2,
	}
)

func (x Chunk_Type) Enum() *Chunk_Type {
	p := new(Chunk_Type)
	*p = x
	return p
}

func (x Chunk_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Chunk_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_cli_to_hub_proto_enumTypes[4].Descriptor()
}

func (Chunk_Type) Type() protoreflect.EnumType {
	return &file_cli_to_hub_proto_enumTypes[4]
}

func (x Chunk_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Chunk_Type.Descriptor instead.
func (Chunk_Type) EnumDescriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{14, 0}
}

type InitializeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentPort    int32    `protobuf:"varint,1,opt,name=agentPort,proto3" json:"agentPort,omitempty"`
	SourceGPHome string   `protobuf:"bytes,2,opt,name=sourceGPHome,proto3" json:"sourceGPHome,omitempty"`
	TargetGPHome string   `protobuf:"bytes,3,opt,name=targetGPHome,proto3" json:"targetGPHome,omitempty"`
	SourcePort   int32    `protobuf:"varint,4,opt,name=sourcePort,proto3" json:"sourcePort,omitempty"`
	UseLinkMode  bool     `protobuf:"varint,5,opt,name=useLinkMode,proto3" json:"useLinkMode,omitempty"`
	Ports        []uint32 `protobuf:"varint,6,rep,packed,name=ports,proto3" json:"ports,omitempty"`
}

func (x *InitializeRequest) Reset() {
	*x = InitializeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeRequest) ProtoMessage() {}

func (x *InitializeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeRequest.ProtoReflect.Descriptor instead.
func (*InitializeRequest) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{0}
}

func (x *InitializeRequest) GetAgentPort() int32 {
	if x != nil {
		return x.AgentPort
	}
	return 0
}

func (x *InitializeRequest) GetSourceGPHome() string {
	if x != nil {
		return x.SourceGPHome
	}
	return ""
}

func (x *InitializeRequest) GetTargetGPHome() string {
	if x != nil {
		return x.TargetGPHome
	}
	return ""
}

func (x *InitializeRequest) GetSourcePort() int32 {
	if x != nil {
		return x.SourcePort
	}
	return 0
}

func (x *InitializeRequest) GetUseLinkMode() bool {
	if x != nil {
		return x.UseLinkMode
	}
	return false
}

func (x *InitializeRequest) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

type InitializeCreateClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InitializeCreateClusterRequest) Reset() {
	*x = InitializeCreateClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeCreateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeCreateClusterRequest) ProtoMessage() {}

func (x *InitializeCreateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeCreateClusterRequest.ProtoReflect.Descriptor instead.
func (*InitializeCreateClusterRequest) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{1}
}

type ExecuteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExecuteRequest) Reset() {
	*x = ExecuteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteRequest) ProtoMessage() {}

func (x *ExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteRequest.ProtoReflect.Descriptor instead.
func (*ExecuteRequest) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{2}
}

type FinalizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FinalizeRequest) Reset() {
	*x = FinalizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeRequest) ProtoMessage() {}

func (x *FinalizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeRequest.ProtoReflect.Descriptor instead.
func (*FinalizeRequest) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{3}
}

type RevertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RevertRequest) Reset() {
	*x = RevertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertRequest) ProtoMessage() {}

func (x *RevertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertRequest.ProtoReflect.Descriptor instead.
func (*RevertRequest) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{4}
}

type RestartAgentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RestartAgentsRequest) Reset() {
	*x = RestartAgentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartAgentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartAgentsRequest) ProtoMessage() {}

func (x *RestartAgentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartAgentsRequest.ProtoReflect.Descriptor instead.
func (*RestartAgentsRequest) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{5}
}

type RestartAgentsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentHosts []string `protobuf:"bytes,1,rep,name=agentHosts,proto3" json:"agentHosts,omitempty"`
}

func (x *RestartAgentsReply) Reset() {
	*x = RestartAgentsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartAgentsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartAgentsReply) ProtoMessage() {}

func (x *RestartAgentsReply) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartAgentsReply.ProtoReflect.Descriptor instead.
func (*RestartAgentsReply) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{6}
}

func (x *RestartAgentsReply) GetAgentHosts() []string {
	if x != nil {
		return x.AgentHosts
	}
	return nil
}

type StopServicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopServicesRequest) Reset() {
	*x = StopServicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopServicesRequest) ProtoMessage() {}

func (x *StopServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopServicesRequest.ProtoReflect.Descriptor instead.
func (*StopServicesRequest) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{7}
}

type StopServicesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopServicesReply) Reset() {
	*x = StopServicesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopServicesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopServicesReply) ProtoMessage() {}

func (x *StopServicesReply) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopServicesReply.ProtoReflect.Descriptor instead.
func (*StopServicesReply) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{8}
}

type SubstepStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step   Substep `protobuf:"varint,1,opt,name=step,proto3,enum=idl.Substep" json:"step,omitempty"`
	Status Status  `protobuf:"varint,2,opt,name=status,proto3,enum=idl.Status" json:"status,omitempty"`
}

func (x *SubstepStatus) Reset() {
	*x = SubstepStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstepStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstepStatus) ProtoMessage() {}

func (x *SubstepStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstepStatus.ProtoReflect.Descriptor instead.
func (*SubstepStatus) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{9}
}

func (x *SubstepStatus) GetStep() Substep {
	if x != nil {
		return x.Step
	}
	return Substep_UNKNOWN_SUBSTEP
}

func (x *SubstepStatus) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN_STATUS
}

type CheckDiskSpaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ratio float64 `protobuf:"fixed64,1,opt,name=ratio,proto3" json:"ratio,omitempty"`
}

func (x *CheckDiskSpaceRequest) Reset() {
	*x = CheckDiskSpaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckDiskSpaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDiskSpaceRequest) ProtoMessage() {}

func (x *CheckDiskSpaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDiskSpaceRequest.ProtoReflect.Descriptor instead.
func (*CheckDiskSpaceRequest) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{10}
}

func (x *CheckDiskSpaceRequest) GetRatio() float64 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

type CheckDiskSpaceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Failed map[string]*CheckDiskSpaceReply_DiskUsage `protobuf:"bytes,1,rep,name=failed,proto3" json:"failed,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CheckDiskSpaceReply) Reset() {
	*x = CheckDiskSpaceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckDiskSpaceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDiskSpaceReply) ProtoMessage() {}

func (x *CheckDiskSpaceReply) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDiskSpaceReply.ProtoReflect.Descriptor instead.
func (*CheckDiskSpaceReply) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{11}
}

func (x *CheckDiskSpaceReply) GetFailed() map[string]*CheckDiskSpaceReply_DiskUsage {
	if x != nil {
		return x.Failed
	}
	return nil
}

type PrepareInitClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PrepareInitClusterRequest) Reset() {
	*x = PrepareInitClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareInitClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareInitClusterRequest) ProtoMessage() {}

func (x *PrepareInitClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareInitClusterRequest.ProtoReflect.Descriptor instead.
func (*PrepareInitClusterRequest) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{12}
}

type PrepareInitClusterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PrepareInitClusterReply) Reset() {
	*x = PrepareInitClusterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareInitClusterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareInitClusterReply) ProtoMessage() {}

func (x *PrepareInitClusterReply) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareInitClusterReply.ProtoReflect.Descriptor instead.
func (*PrepareInitClusterReply) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{13}
}

type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buffer []byte     `protobuf:"bytes,1,opt,name=buffer,proto3" json:"buffer,omitempty"`
	Type   Chunk_Type `protobuf:"varint,2,opt,name=type,proto3,enum=idl.Chunk_Type" json:"type,omitempty"`
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{14}
}

func (x *Chunk) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

func (x *Chunk) GetType() Chunk_Type {
	if x != nil {
		return x.Type
	}
	return Chunk_UNKNOWN
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Contents:
	//	*Message_Chunk
	//	*Message_Status
	//	*Message_Response
	Contents isMessage_Contents `protobuf_oneof:"contents"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{15}
}

func (m *Message) GetContents() isMessage_Contents {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (x *Message) GetChunk() *Chunk {
	if x, ok := x.GetContents().(*Message_Chunk); ok {
		return x.Chunk
	}
	return nil
}

func (x *Message) GetStatus() *SubstepStatus {
	if x, ok := x.GetContents().(*Message_Status); ok {
		return x.Status
	}
	return nil
}

func (x *Message) GetResponse() *Response {
	if x, ok := x.GetContents().(*Message_Response); ok {
		return x.Response
	}
	return nil
}

type isMessage_Contents interface {
	isMessage_Contents()
}

type Message_Chunk struct {
	Chunk *Chunk `protobuf:"bytes,1,opt,name=chunk,proto3,oneof"`
}

type Message_Status struct {
	Status *SubstepStatus `protobuf:"bytes,2,opt,name=status,proto3,oneof"`
}

type Message_Response struct {
	Response *Response `protobuf:"bytes,3,opt,name=response,proto3,oneof"`
}

func (*Message_Chunk) isMessage_Contents() {}

func (*Message_Status) isMessage_Contents() {}

func (*Message_Response) isMessage_Contents() {}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{16}
}

func (x *Response) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetConfigRequest) Reset() {
	*x = GetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigRequest) ProtoMessage() {}

func (x *GetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigRequest.ProtoReflect.Descriptor instead.
func (*GetConfigRequest) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{17}
}

func (x *GetConfigRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetConfigReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetConfigReply) Reset() {
	*x = GetConfigReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigReply) ProtoMessage() {}

func (x *GetConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigReply.ProtoReflect.Descriptor instead.
func (*GetConfigReply) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{18}
}

func (x *GetConfigReply) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type CheckDiskSpaceReply_DiskUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available uint64 `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	Required  uint64 `protobuf:"varint,2,opt,name=required,proto3" json:"required,omitempty"`
}

func (x *CheckDiskSpaceReply_DiskUsage) Reset() {
	*x = CheckDiskSpaceReply_DiskUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckDiskSpaceReply_DiskUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDiskSpaceReply_DiskUsage) ProtoMessage() {}

func (x *CheckDiskSpaceReply_DiskUsage) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDiskSpaceReply_DiskUsage.ProtoReflect.Descriptor instead.
func (*CheckDiskSpaceReply_DiskUsage) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{11, 0}
}

func (x *CheckDiskSpaceReply_DiskUsage) GetAvailable() uint64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *CheckDiskSpaceReply_DiskUsage) GetRequired() uint64 {
	if x != nil {
		return x.Required
	}
	return 0
}

var File_cli_to_hub_proto protoreflect.FileDescriptor

var file_cli_to_hub_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x6c, 0x69, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x69, 0x64, 0x6c, 0x22, 0xd1, 0x01, 0x0a, 0x11, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x50, 0x48, 0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x50, 0x48, 0x6f, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x47, 0x50, 0x48, 0x6f, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x47, 0x50, 0x48,
	0x6f, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x20, 0x0a, 0x1e, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x10, 0x0a,
	0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x11, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x34, 0x0a, 0x12, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74,
	0x73, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x56, 0x0a,
	0x0d, 0x53, 0x75, 0x62, 0x73, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20,
	0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x69,
	0x64, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x65, 0x70, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2d, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x69,
	0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x22, 0xf9, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x69,
	0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3c, 0x0a, 0x06,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69,
	0x64, 0x6c, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x1a, 0x45, 0x0a, 0x09, 0x44, 0x69,
	0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x1a, 0x5d, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x6b,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x1b, 0x0a, 0x19, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x19, 0x0a,
	0x17, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x71, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2b,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x44, 0x4f, 0x55, 0x54, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x54, 0x44, 0x45, 0x52, 0x52, 0x10, 0x02, 0x22, 0x94, 0x01, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x2c, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x64,
	0x6c, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x64,
	0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x70, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69,
	0x64, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x26, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x26, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2a, 0x4f, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x12, 0x10, 0x0a, 0x0c,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x46,
	0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x56,
	0x45, 0x52, 0x54, 0x10, 0x04, 0x2a, 0x8a, 0x06, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x73, 0x74, 0x65,
	0x70, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x55, 0x42,
	0x53, 0x54, 0x45, 0x50, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x10, 0x01,
	0x12, 0x20, 0x0a, 0x1c, 0x53, 0x41, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x48, 0x55, 0x42, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54,
	0x53, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x44, 0x49, 0x53,
	0x4b, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x52, 0x47,
	0x45, 0x54, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17,
	0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f,
	0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x41, 0x43,
	0x4b, 0x55, 0x50, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45,
	0x52, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x55, 0x50, 0x47,
	0x52, 0x41, 0x44, 0x45, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f,
	0x57, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45,
	0x52, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4d,
	0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x50, 0x59, 0x5f,
	0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x50, 0x47, 0x52,
	0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x49, 0x45, 0x53, 0x10, 0x0e, 0x12,
	0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f,
	0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x2c, 0x0a, 0x28, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x41, 0x4c,
	0x4f, 0x47, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x49,
	0x45, 0x53, 0x10, 0x11, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54,
	0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x53,
	0x10, 0x12, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x4e, 0x44, 0x42, 0x59, 0x10, 0x13, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x50, 0x47, 0x52, 0x41,
	0x44, 0x45, 0x5f, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0x14, 0x12, 0x16, 0x0a, 0x12,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x53, 0x10, 0x15, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x50,
	0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x44, 0x49, 0x52, 0x53, 0x10,
	0x16, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x44, 0x49, 0x52, 0x10, 0x17, 0x12, 0x1c, 0x0a, 0x18,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x44, 0x49, 0x52, 0x53, 0x10, 0x18, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54,
	0x4f, 0x50, 0x5f, 0x48, 0x55, 0x42, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54,
	0x53, 0x10, 0x19, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4d, 0x41,
	0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x44, 0x49, 0x52, 0x10, 0x1a, 0x12,
	0x1b, 0x0a, 0x17, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x10, 0x1b, 0x12, 0x1a, 0x0a, 0x16,
	0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43,
	0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x1c, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52,
	0x10, 0x1d, 0x2a, 0x43, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x2a, 0xc6, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x06,
	0x32, 0xba, 0x04, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x54, 0x6f, 0x48, 0x75, 0x62, 0x12, 0x48, 0x0a,
	0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x1a, 0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x6b, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x69, 0x64,
	0x6c, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e,
	0x69, 0x64, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x50, 0x0a, 0x17, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x69, 0x64, 0x6c,
	0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0c, 0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x30, 0x0a, 0x07, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x69,
	0x64, 0x6c, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0c, 0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x32, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12,
	0x14, 0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x2e, 0x0a, 0x06, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x74, 0x12, 0x12, 0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x39, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x15, 0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x69, 0x64,
	0x6c, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x45, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x19, 0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0c, 0x53, 0x74, 0x6f,
	0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x69, 0x64, 0x6c, 0x2e,
	0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x05, 0x5a,
	0x03, 0x69, 0x64, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cli_to_hub_proto_rawDescOnce sync.Once
	file_cli_to_hub_proto_rawDescData = file_cli_to_hub_proto_rawDesc
)

func file_cli_to_hub_proto_rawDescGZIP() []byte {
	file_cli_to_hub_proto_rawDescOnce.Do(func() {
		file_cli_to_hub_proto_rawDescData = protoimpl.X.CompressGZIP(file_cli_to_hub_proto_rawDescData)
	})
	return file_cli_to_hub_proto_rawDescData
}

var file_cli_to_hub_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_cli_to_hub_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_cli_to_hub_proto_goTypes = []interface{}{
	(Step)(0),                              // 0: idl.Step
	(Substep)(0),                           // 1: idl.Substep
	(Status)(0),                            // 2: idl.Status
	(ResponseKey)(0),                       // 3: idl.ResponseKey
	(Chunk_Type)(0),                        // 4: idl.Chunk.Type
	(*InitializeRequest)(nil),              // 5: idl.InitializeRequest
	(*InitializeCreateClusterRequest)(nil), // 6: idl.InitializeCreateClusterRequest
	(*ExecuteRequest)(nil),                 // 7: idl.ExecuteRequest
	(*FinalizeRequest)(nil),                // 8: idl.FinalizeRequest
	(*RevertRequest)(nil),                  // 9: idl.RevertRequest
	(*RestartAgentsRequest)(nil),           // 10: idl.RestartAgentsRequest
	(*RestartAgentsReply)(nil),             // 11: idl.RestartAgentsReply
	(*StopServicesRequest)(nil),            // 12: idl.StopServicesRequest
	(*StopServicesReply)(nil),              // 13: idl.StopServicesReply
	(*SubstepStatus)(nil),                  // 14: idl.SubstepStatus
	(*CheckDiskSpaceRequest)(nil),          // 15: idl.CheckDiskSpaceRequest
	(*CheckDiskSpaceReply)(nil),            // 16: idl.CheckDiskSpaceReply
	(*PrepareInitClusterRequest)(nil),      // 17: idl.PrepareInitClusterRequest
	(*PrepareInitClusterReply)(nil),        // 18: idl.PrepareInitClusterReply
	(*Chunk)(nil),                          // 19: idl.Chunk
	(*Message)(nil),                        // 20: idl.Message
	(*Response)(nil),                       // 21: idl.Response
	(*GetConfigRequest)(nil),               // 22: idl.GetConfigRequest
	(*GetConfigReply)(nil),                 // 23: idl.GetConfigReply
	(*CheckDiskSpaceReply_DiskUsage)(nil),  // 24: idl.CheckDiskSpaceReply.DiskUsage
	nil,                                    // 25: idl.CheckDiskSpaceReply.FailedEntry
	nil,                                    // 26: idl.Response.DataEntry
}
var file_cli_to_hub_proto_depIdxs = []int32{
	1,  // 0: idl.SubstepStatus.step:type_name -> idl.Substep
	2,  // 1: idl.SubstepStatus.status:type_name -> idl.Status
	25, // 2: idl.CheckDiskSpaceReply.failed:type_name -> idl.CheckDiskSpaceReply.FailedEntry
	4,  // 3: idl.Chunk.type:type_name -> idl.Chunk.Type
	19, // 4: idl.Message.chunk:type_name -> idl.Chunk
	14, // 5: idl.Message.status:type_name -> idl.SubstepStatus
	21, // 6: idl.Message.response:type_name -> idl.Response
	26, // 7: idl.Response.data:type_name -> idl.Response.DataEntry
	24, // 8: idl.CheckDiskSpaceReply.FailedEntry.value:type_name -> idl.CheckDiskSpaceReply.DiskUsage
	15, // 9: idl.CliToHub.CheckDiskSpace:input_type -> idl.CheckDiskSpaceRequest
	5,  // 10: idl.CliToHub.Initialize:input_type -> idl.InitializeRequest
	6,  // 11: idl.CliToHub.InitializeCreateCluster:input_type -> idl.InitializeCreateClusterRequest
	7,  // 12: idl.CliToHub.Execute:input_type -> idl.ExecuteRequest
	8,  // 13: idl.CliToHub.Finalize:input_type -> idl.FinalizeRequest
	9,  // 14: idl.CliToHub.Revert:input_type -> idl.RevertRequest
	22, // 15: idl.CliToHub.GetConfig:input_type -> idl.GetConfigRequest
	10, // 16: idl.CliToHub.RestartAgents:input_type -> idl.RestartAgentsRequest
	12, // 17: idl.CliToHub.StopServices:input_type -> idl.StopServicesRequest
	16, // 18: idl.CliToHub.CheckDiskSpace:output_type -> idl.CheckDiskSpaceReply
	20, // 19: idl.CliToHub.Initialize:output_type -> idl.Message
	20, // 20: idl.CliToHub.InitializeCreateCluster:output_type -> idl.Message
	20, // 21: idl.CliToHub.Execute:output_type -> idl.Message
	20, // 22: idl.CliToHub.Finalize:output_type -> idl.Message
	20, // 23: idl.CliToHub.Revert:output_type -> idl.Message
	23, // 24: idl.CliToHub.GetConfig:output_type -> idl.GetConfigReply
	11, // 25: idl.CliToHub.RestartAgents:output_type -> idl.RestartAgentsReply
	13, // 26: idl.CliToHub.StopServices:output_type -> idl.StopServicesReply
	18, // [18:27] is the sub-list for method output_type
	9,  // [9:18] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_cli_to_hub_proto_init() }
func file_cli_to_hub_proto_init() {
	if File_cli_to_hub_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cli_to_hub_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeCreateClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartAgentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartAgentsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopServicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopServicesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstepStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckDiskSpaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckDiskSpaceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareInitClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareInitClusterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckDiskSpaceReply_DiskUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cli_to_hub_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*Message_Chunk)(nil),
		(*Message_Status)(nil),
		(*Message_Response)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cli_to_hub_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cli_to_hub_proto_goTypes,
		DependencyIndexes: file_cli_to_hub_proto_depIdxs,
		EnumInfos:         file_cli_to_hub_proto_enumTypes,
		MessageInfos:      file_cli_to_hub_proto_msgTypes,
	}.Build()
	File_cli_to_hub_proto = out.File
	file_cli_to_hub_proto_rawDesc = nil
	file_cli_to_hub_proto_goTypes = nil
	file_cli_to_hub_proto_depIdxs = nil
}
